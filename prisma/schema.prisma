// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  Admin
  Purchasing
  Warehouse
}

// Model Role
model Role {
  id        String @id @default(uuid())
  name      RoleName
  users     User[]
  createdAt DateTime @default(now())
}

// Model User
model User {
  id              String @id @default(uuid())
  name            String
  email           String @unique
  password        String
  role            Role @relation(fields: [roleId], references: [id], onDelete: Restrict)
  roleId          String
  createdAt       DateTime @default(now())

  purchaseOrder   PurchaseOrder[]
  purchaseRequest PurchaseRequest[] @relation("RequestBy")
  purchaseApprove PurchaseRequest[] @relation("ApprovedBy")
  purchaseRevision PurchaseRequestRevisionLog[]
}

// Model Raw Material
model RawMaterial {
  id                  String @id @default(uuid())
  name                String
  description         String?
  stock               Int @default(0)
  unit                String
  minStock            Int @default(0)
  maxStock            Int @default(0)
  safetyStock         Int @default(0)
  createdAt           DateTime @default(now())

  suppliers           RawMaterialSupplier[]
  purchaseOrderItem   PurchaseOrderItem[]
  purchaseRequestItem PurchaseRequestItem[]
}

// Model Supplier
model Supplier {
  id            String @id @default(uuid())
  name          String
  email         String?
  phone         String?
  createdAt     DateTime @default(now())

  materials     RawMaterialSupplier[]
  purchaseOrder PurchaseOrder[]
}

// Pivot Model RawMaterial-Supplier
model RawMaterialSupplier {
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Cascade)
  rawMaterialId String
  supplier      Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId    String
  price         Decimal @default(0.0)
  minOrder      Int @default(0)
  createdAt     DateTime @default(now())

  @@id([rawMaterialId, supplierId])
}

enum PurchaseOrderStatus {
  PENDING      // Semua item masih dalam status PENDING
  PARTIAL      // Ada item RECEIVED dan ada yang belum
  DELIVERY     // Semua item dalam DELIVERY atau kombinasi PENDING/DELIVERY
  RECEIVED     // Semua item RECEIVED
  CANCELLED    // Semua item dibatalkan
}

// Model Purchase Order
model PurchaseOrder {
  id          String @id @default(uuid())
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  supplierId  String
  createdBy   User @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById String
  orderDate   DateTime @default(now())
  orderNotes  String?
  status      PurchaseOrderStatus @default(PENDING)
  items       PurchaseOrderItem[]
  createdAt   DateTime @default(now())
}

// Enum untuk Status Item di Purchase Order
enum PurchaseOrderItemStatus {
  PENDING
  DELIVERY
  RECEIVED
  CANCELLED
}

// Model Purchase Order Item
model PurchaseOrderItem {
  id                    String @id @default(uuid())
  purchaseOrder         PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId       String
  rawMaterial           RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Restrict)
  rawMaterialId         String
  quantity              Int
  unitPrice             Decimal @default(0.0)
  status                PurchaseOrderItemStatus @default(PENDING)
  receivedQty           Int @default(0)
  receivedDate          DateTime?
  createdAt             DateTime @default(now())

  purchaseRequestItem   PurchaseRequestItem?  @relation(fields: [purchaseRequestItemId], references: [id], onDelete: SetNull)
  purchaseRequestItemId String?
}

// Enum untuk Status Purchase Request
enum PurchaseRequestStatus {
  SUBMITTED
  REVISION
  REJECTED
  APPROVED
}

// Model Purchase Request
model PurchaseRequest {
  id            String @id @default(uuid())
  requestedBy   User @relation("RequestBy", fields: [requestedById], references: [id], onDelete: Restrict)
  requestedById String
  approvedBy    User? @relation("ApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById  String?
  requestDate   DateTime @default(now())
  status        PurchaseRequestStatus @default(SUBMITTED)
  description   String?
  items         PurchaseRequestItem[]
  createdAt     DateTime @default(now())

  PurchaseRequestRevisionLog PurchaseRequestRevisionLog[]
}

// Model Purchase Request Item
model PurchaseRequestItem {
  id                String @id @default(uuid())
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  purchaseRequestId String
  rawMaterial       RawMaterial @relation(fields: [rawMaterialId], references: [id], onDelete: Restrict)
  rawMaterialId     String
  quantity          Int
  createdAt         DateTime @default(now())

  purchaseOrderItems   PurchaseOrderItem[]
}


model PurchaseRequestRevisionLog {
  id                String @id @default(uuid())
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id])
  purchaseRequestId String
  revisedBy         User @relation(fields: [revisedById], references: [id])
  revisedById       String
  revisionNote      String?
  createdAt         DateTime @default(now())
}